/* keysCore.js: Control settings
 * Assigning actions to keys
 */
var Keys = {
// keyCode => keyName (generated by function Keys.formReverseKeyCodesTable())
	KEYNAMES : {},
// keyName => keyCode
	KEYCODES : {
		"Backspace"		: 8,
		"Tab"			: 9,
		"Enter"			: 13,
		"Pause"			: 19,
		"Esc"			: 27,
		"Space"         : 32,
		"PageUp"		: 33,
		"PageDown"		: 34,
		"End"			: 35,
		"Home"			: 36,
		"LeftArrow"		: 37,
		"UpArrow"		: 38,
		"RightArrow"	: 39,
		"DownArrow"		: 40,
		"Insert"		: 45,
		"Delete"		: 46,
		"0"				: 48,
		"1"				: 49,
		"2"				: 50,
		"3"				: 51,
		"4"				: 52,
		"5"				: 53,
		"6"				: 54,
		"7"				: 55,
		"8"				: 56,
		"9"				: 57,
		"A"				: 65,
		"B"				: 66,
		"C"				: 67,
		"D"				: 68,
		"E"				: 69,
		"F"				: 70,
		"G"				: 71,
		"H"				: 72,
		"I"				: 73,
		"J"				: 74,
		"K"				: 75,
		"L"				: 76,
		"M"				: 77,
		"N"				: 78,
		"O"				: 79,
		"P"				: 80,
		"Q"				: 81,
		"R"				: 82,
		"S"				: 83,
		"T"				: 84,
		"U"				: 85,
		"V"				: 86,
		"W"				: 87,
		"X"				: 88,
		"Y"				: 89,
		"Z"				: 90,
		"Num 0"			: 96,
		"Num 1"			: 97,
		"Num 2"			: 98,
		"Num 3"			: 99,
		"Num 4"			: 100,
		"Num 5"			: 101,
		"Num 6"			: 102,
		"Num 7"			: 103,
		"Num 8"			: 104,
		"Num 9"			: 105,
		"Num *"			: 106,
		"Num +"			: 107,
		"Num -"			: 109,
		"Num ."			: 110,
		"Num /"			: 111,
		"F1"			: 112,
		"F2"			: 113,
		"F3"			: 114,
		"F4"			: 115,
		"F5"			: 116,
		"F6"			: 117,
		"F7"			: 118,
		"F8"			: 119,
		"F9"			: 120,
		"F10"			: 121,
		"F11"			: 122,
		"F12"			: 123,
		";"				: 186,
		"="				: 187,
		","				: 188,
		"-"				: 189,
		"."				: 190,
		"/"				: 191,
		"~"				: 192,
		"["				: 219,
		"\\"			: 220,
		"]"				: 221,
		"'"				: 222
	},
// Public changable properties
	mode 					: -1,
	keyActions : {
		0: {
			0:{0:{0:{},1:{}},1:{0:{},1:{}}},
			1:{0:{0:{},1:{}},1:{0:{},1:{}}}
		},
		1: {
			0:{0:{0:{},1:{}},1:{0:{},1:{}}},
			1:{0:{0:{},1:{}},1:{0:{},1:{}}}
		},
		2: {
			0:{0:{0:{},1:{}},1:{0:{},1:{}}},
			1:{0:{0:{},1:{}},1:{0:{},1:{}}}
		},
		3: {
			0:{0:{0:{},1:{}},1:{0:{},1:{}}},
			1:{0:{0:{},1:{}},1:{0:{},1:{}}}
		}, 
		4: {
			0:{0:{0:{},1:{}},1:{0:{},1:{}}},
			1:{0:{0:{},1:{}},1:{0:{},1:{}}}
		},
		5: {
			0:{0:{0:{},1:{}},1:{0:{},1:{}}},
			1:{0:{0:{},1:{}},1:{0:{},1:{}}}
		},
		6: {
			0:{0:{0:{},1:{}},1:{0:{},1:{}}},
			1:{0:{0:{},1:{}},1:{0:{},1:{}}}
		}
	}	
};
Keys.formReverseKeyCodesTable = function _() {
// Form array "keyCode => keyName" from constant KEYCODES 
// (that contains reverse array "keyName => keyCode")
	for (var i in KEYCODES) {
		KEYNAMES[KEYCODES[i]] = i;
	}
};
Keys.assign = function _(params) {
/* Assign action to key combination.
 * First argument as assigned function.
 * Other arguments are usual keys or modifier keys (ctrl, alt or shift).
 * The second last argument must not be modifier key.
 * The last argument must be key mode (see Keys.KEY_MODE_ section)
 * Usage example: Keys.assign(help, "Ctrl", "Alt", "H")
 */
	if (!handlers.keysActions[params.action]) {
		throw new Error("No action "+params.action+" is registered");
	}
	var ctrl = 0;
	var alt = 0;
	var shift = 0;
	var key = null;
	var keyMode = params.mode;
	
	for (var i=0; i<params.keys.length; i++) {
		if (params.keys[i] == "Ctrl") {
			ctrl = 1;
		} else if (params.keys[i] == "Alt") {
			alt = 1;
		} else if (params.keys[i] == "Shift") {
			shift = 1;
		} else if (key == null) {
			key = Keys.KEYCODES[params.keys[i]];
		} else {
			throw new Error("Multiple non-modifier keys in assignation; action "+params.action+", keys: "+params.keys);
		}
	}
	if (key == null) {
		throw new Error("Key is not given; action "+params.action+", keys: "+params.keys);
	}
	if (params.arguments === undefined) {
		params.arguments = [];
	}
//	console["log"]("assign ", params.action, "to ",keyMode, ctrl, alt, shift, key);
	Keys.keyActions[keyMode][ctrl][alt][shift][key] = [handlers.keysActions[params.action], params.arguments];
};
Keys.universalKeyDownHandler = function _(e) {
// The function in document.addEventListener("keyDown")
// Handles all the key presses in game. 
	if (UI.mode == UI.MODE_MENU) {
		return true;
	}
	var ctrl = e.ctrlKey ? 1 : 0;
	var alt = e.altKey ? 1 : 0;
	var shift = e.shiftKey ? 1 : 0;
	var key = e.keyCode;
	var keyMode = UI.mode;
//	console["log"](keyMode, ctrl, alt, shift, key);
	var registeredActionHolder;
	if (
		(keyMode == UI.MODE_ON_GLOBAL_MAP || 
		keyMode == UI.MODE_IN_LOCATION) &&
		Keys.keyActions[UI.MODE_ALWAYS][ctrl][alt][shift][key]
	) {
	// Apply "default" action
		registeredActionHolder = Keys.keyActions[UI.MODE_ALWAYS][ctrl][alt][shift][key];
	} else {
		registeredActionHolder = Keys.keyActions[keyMode][ctrl][alt][shift][key];
	}
	if (registeredActionHolder) {
		e.preventDefault();
		if (registeredActionHolder[0].context instanceof UIElement && UI.disabled) {
		// If this is action of UIElement and UI is disabled, return
			return;
		}
		registeredActionHolder[0].action.apply(registeredActionHolder[0].context,registeredActionHolder[1]);		
	}	
};
Keys.registerKeyAction = function _(action, name, context) {
/* Add action to keysActions list under name $name.
 * Before assigning any action to any key we should register this action
 * so action obtanis name and context.
 * Context determines which object function $action applies to
 * (by default it is window)
 */
//	console["log"]("register key action ",name," in ",context);
	if (handlers.keysActions[name]) {
		throw new Error("Another action under name "+name+" is already registred");
	}
	if (context === undefined) {
		context = window;
	}
	handlers.keysActions[name] = {
		action : action,
		context: context
	};
};

